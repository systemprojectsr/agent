[
  {
    "name": "outsourcing-auth",
    "path": "/workspace/user_input_files/production-main/outsourcing-auth",
    "technology": "Go",
    "endpoints": [
      "outsourcing-auth",
      "account/card/create",
      "OGRN",
      "Company",
      "account/card/list",
      "account/card/delete",
      "register/client",
      "notes/docker-compose-pgsql-pgadmin/",
      "login",
      "register/company",
      "account",
      "/cpit"
    ],
    "description": "1. `git clone git@github.com:APSN4/outsourcing-auth.git`.",
    "port": "unknown",
    "documentation": [
      "## Microservice outsourcing-auth\n\n## 🚀 How to run\n1. `git clone git@github.com:APSN4/outsourcing-auth.git`.\n2. `cd outsourcing-auth`.\n3. Create an env file in the root directory.\n4. `docker-compose up -d --build`\n\n### ENV:\n`.env` - file with secrets.  \n```\nPOSTGRES_USER=user\nPOSTGRES_PW=password\nPOSTGRES_DB=outsourcing\nPOSTGRES_HOST=postgres\nPOSTGRES_PORT=5432\nPGADMIN_MAIL=your@example.com\nPGADMIN_PW=password\nKEY_JWT=secret-key-256\nLIFE_TIME_JWT=3600\n```\n\n### Postgres & pgAdmin\nCreate and start the containers. Make sure that you’re inside\nthe directory that contains the docker-compose.yml file and run: `docker compose up`.\n\nIf you want to use pgAdmin, check out this guide: https://cpit490.gitlab.io/notes/docker-compose-pgsql-pgadmin/  \n\n## 📖 API Documentation\n\n### Login into account\n\nAuthorization for companies and clients. When the user is logged in, they will have a token that represents a valid session.\n\n<img src=\"storage/5377573460508798167.jpg\" width=\"256\"/>\n\n**URL** : `v1/login`\n\n**Method** : `POST`\n\n**Auth required** : NO\n\n**Permissions required** : None\n\n**Attributes:**\n* email\n* password\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"email\": \"myemail@gmail.com\",\n      \"password_hash\": \"hash\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\nFor a user with an email address myemail@gmail.com and with some password, \nthe server service will send a text status code, user ID, session token, and account type:  \n\n```json\n{\n  \"status\": \"success\",\n  \"user\": {\n    \"id\": 123,\n    \"token\": \"token\",\n    \"type\": \"client\"\n  }\n}\n```\n\n----------\n### Client registration\n\nThis API provides client registration, \nand the server service sends a text status code, user ID, session token, and account type:  \n\n<img src=\"storage/5377573460508798168.jpg\" width=\"256\"/>\n\n**URL** : `v1/register/client`\n\n**Method** : `POST`\n\n**Auth required** : NO\n\n**Permissions required** : None\n\n**Attributes:**\n* Full_name\n* Email\n* Phone\n* Password\n* Photo (not necessary)\n* Account type\n\n```json\n{\n  \"user\": {\n    \"register\": {\n      \"full_name\": \"name surname patronymic\",\n      \"email\": \"myemail@gmail.com\",\n      \"phone\": \"89017335432\",\n      \"password\": \"hash\",\n      \"photo\": null,\n      \"type\": \"client\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\nFor a client with attributes, \nthe server service will send a text status code, user ID, session token, and account type:  \n\n```json\n{\n  \"status\": \"success\",\n  \"user\": {\n    \"id\": 123,\n    \"token\": \"token\",\n    \"type\": \"client\"\n  }\n}\n```\n\n----------\n### Company registration\n\nThis API provides company registration,\nand the server service sends a text status code, user ID, session token, and account type:\n\n<img src=\"storage/5377573460508798169.jpg\" width=\"256\"/>\n\n**URL** : `v1/register/company`\n\n**Method** : `POST`\n\n**Auth required** : NO\n\n**Permissions required** : None\n\n**Attributes:**\n* Company_name\n* Email\n* Phone\n* Full_name\n* Position_agent\n* ID_company (INN/OGRN)\n* Address\n* Type_service\n* Password\n* Photo (not necessary)\n* Account type\n* Docs urls\n\n```json\n{\n  \"user\": {\n    \"register\": {\n      \"company_name\": \"Apple\",\n      \"email\": \"myemail@gmail.com\",\n      \"phone\": \"89017335432\",\n      \"full_name\": \"name surname patronymic\",\n      \"position_agent\": \"CEO\",\n      \"id_company\": \"00000000\",\n      \"address\": \"Moscow, Leninskiy prospekt, dom 7\",\n      \"type_service\": \"Car dealership\",\n      \"password\": \"hash\",\n      \"photo\": null,\n      \"documents\": [\"link\", \"link\"],\n      \"type\": \"company\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\nFor a company with attributes,\nthe server service will send a text status code, user ID, session token, and account type:\n\n```json\n{\n  \"status\": \"success\",\n  \"user\": {\n    \"id\": 123,\n    \"token\": \"token\",\n    \"type\": \"company\"\n  }\n}\n```\n\n----------\n### Client/Company account\n\nThis API provides company and client account by session token,\nand the server service sends a text status code, user ID, session token, and account type:\n\n<img src=\"storage/5377573460508798170.jpg\" width=\"256\"/>  \n<img src=\"storage/5377573460508798171.jpg\" width=\"256\"/>\n\n**URL** : `v1/account`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\nFor a **client**,\nthe server service will send a text status code, user ID, full name, phone, email, photo url, session token, and account type:\n\n```json\n{\n  \"status\": \"success\",\n  \"user\": {\n    \"account\": {\n      \"id\": 123,\n      \"full_name\": \"name surname patronymic\",\n      \"phone\": \"89017335432\",\n      \"email\": \"myemail@gmail.com\",\n      \"photo\": \"photo_url\",\n      \"token\": \"token\",\n      \"type\": \"client\"\n    }\n  }\n}\n```\n----------\n**Code** : `200 OK`\n\n**Content examples**\n\nFor a **company**,\nthe server service will send a text status code, user ID, company name, stars, email, photo url, session token, and account type:\n\n```json\n{\n  \"status\": \"success\",\n  \"user\": {\n    \"account\": {\n      \"id\": 123,\n      \"company_name\": \"Apple\",\n      \"stars\": 4.7,\n      \"email\": \"myemail@gmail.com\",\n      \"photo\": \"photo_url\",\n      \"token\": \"token\",\n      \"type\": \"company\"\n    }\n  }\n}\n```\n\n----------\n### Cards system [Create]\n\nThis API provides interaction with company service cards.\n\n**URL** : `v1/account/card/create`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n* Title\n* Description\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  },\n  \"card\": {\n    \"title\": \"This is a title\",\n    \"description\": \"This is a description\"\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\n```json\n{\n  \"card\": {\n    \"company_id\": 1,\n    \"description\": \"This is a description\",\n    \"id\": 1,\n    \"title\": \"This is a title\"\n  }\n}\n```\n\n----------\n### Cards system [List]\n\nThis API provides interaction with company service cards.  \nYou can use queries in a POST request. Available parameters are `limit` and `page`, which create opportunities for pagination.  \n\n**URL** : `v1/account/card/list`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\n```json\n{\n  \"cards\": [\n    {\n      \"id\": 1,\n      \"title\": \"This is a title\",\n      \"description\": \"This is a description\",\n      \"company_id\": 1\n    },\n    {\n      \"id\": 2,\n      \"title\": \"This is a title2\",\n      \"description\": \"This is a description2\",\n      \"company_id\": 1\n    }\n  ]\n}\n```\n#### 📌 We can change limit:\n\n**URL** : `v1/account/card/list?limit=1&page=0`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\n```json\n{\n  \"cards\": [\n    {\n      \"id\": 1,\n      \"title\": \"This is a title\",\n      \"description\": \"This is a description\",\n      \"company_id\": 1\n    }\n  ]\n}\n```\n#### 📌 We can change pages:\n\n**URL** : `v1/account/card/list?limit=1&page=1`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\n```json\n{\n  \"cards\": [\n    {\n      \"id\": 2,\n      \"title\": \"This is a title2\",\n      \"description\": \"This is a description2\",\n      \"company_id\": 1\n    }\n  ]\n}\n```\n\n----------\n### Cards system [Delete]\n\nThis API provides interaction with company service cards.  \nThis will write a `deleted_at` mark and store it in the database without access.  \n\n**URL** : `v1/account/card/delete`\n\n**Method** : `POST`\n\n**Auth required** : YES\n\n**Permissions required** : None\n\n**Attributes:**\n* Token\n\n```json\n{\n  \"user\": {\n    \"login\": {\n      \"token\": \"token\"\n    }\n  },\n  \"card\": {\n    \"id\": 1\n  }\n}\n```\n\n### Success Response\n\n**Code** : `200 OK`\n\n**Content examples**\n\n```json\n{\n  \"card\": {\n    \"action\": \"deleted\",\n    \"status\": \"success\"\n  }\n}\n```\n----------\n\n## Notes\n\n* This API created by UI design reference.\n* `Stars` - this is a rating system (now it's a mock)\n* `Session token` - this is an authentication token (which we can use to identify the user)"
    ]
  },
  {
    "name": "Search+Parameters",
    "path": "/workspace/user_input_files/production-main/Search+Parameters",
    "technology": "Go",
    "endpoints": [
      "price_from",
      "location",
      "rating",
      "sort",
      "search",
      "catalog/main",
      "/localhost",
      "price_to"
    ],
    "description": "Микросервис для поиска и фильтрации услуг специалистов с возможностью сортировки.",
    "port": "8080",
    "documentation": [
      "# Service Catalog API\n\nМикросервис для поиска и фильтрации услуг специалистов с возможностью сортировки.\n\n## Возможности\n\n- Поиск услуг по характеристикам\n- Фильтрация по цене, рейтингу и району\n- Сортировка по цене, рейтингу\n\n## Быстрый старт\n\n1. Установите зависимости:\n```bash\ngo mod download\n```\n\n2. Запустите сервис:\n```bash\ngo run cmd/catalog/main.go\n```\n\nСервис будет доступен по адресу: `http://localhost:8080`\n\n## 🔍 Доступные запросы\n\n### Базовый поиск\n```\nGET /search\n```\n\n### Фильтры:\n1. По цене (диапазон):\n```\n/search?price_from=1000&price_to=3000\n```\n\n2. По району:\n```\n/search?location=Центральный район\n```\n\n3. По минимальному рейтингу:\n```\n/search?rating=4.0\n```\n\n### Сортировка:\n1. По возрастанию цены:\n```\n/search?sort=price_low\n```\n2. По убыванию цены:\n```\n/search?sort=price_high\n```\n\n3. По возрастанию рейтинга:\n```\n/search?sort=rating_low\n```\n\n4. По убыванию рейтинга:\n```\n/search?sort=rating_high\n```\n\n### Комбинированные запросы:\n```\n/search?location=Центральный район&price_from=1500&sort=rating_high\n```\n\n## 📋 Пример ответа\n```json\n[\n  {\n    \"id\": 2,\n    \"name\": \"Химчистка мебели\",\n    \"description\": \"Глубокая очистка вашей мебели\",\n    \"price\": 3000,\n    \"location\": \"Северный район\", \n    \"rating\": 4.7\n  },\n]\n```\n## 🛠 Технологии\n- Go 1.20+\n- BoltDB (встроенная база данных)\n\n```\n"
    ]
  },
  {
    "name": "BD Client-Company",
    "path": "/workspace/user_input_files/production-main/BD Client-Company",
    "technology": "Python",
    "endpoints": [
      "user_companies",
      "/users/<int:user_id>/companies",
      "users",
      "users/",
      "messages/",
      "/",
      "/companies",
      "/users",
      "/stream",
      "/messages/<int:user_id>",
      "/user_companies",
      "/uploads/<path:name>",
      "companies"
    ],
    "description": "﻿БД уже создана и находится в архиве",
    "port": "5000",
    "documentation": [
      "﻿БД уже создана и находится в архиве\nДля теста Запускаем app.py и в браузере переходим на http://127.0.0.1:5000\nСейчас доступны следующие страницы:\nВсе клиенты - /users\nВсе компании - /companies\nВсе связи (пользователи и компании) - /user_companies\nСписок компаний для конкретного пользователя - /users/(user_id)/companies\nСписок всех сообщений для конкретного пользоватьеля - /messages/(user_id)\n\n(user_id) заменять на 1 или 2\nсозданы 2 пользователя и 2 компании с соответствующими id - 1, 2\nПока что имеются лишь функции просмотра данных таблицы\nСписок всех сообщений для конкретного пользоватьеля будет изменён на список всех сообщений по id связи\n"
    ]
  },
  {
    "name": "DS-AM",
    "path": "/workspace/user_input_files/production-main/DS-AM",
    "technology": "Go",
    "endpoints": [
      "json",
      "form-data",
      "photos/",
      "price_from",
      "limit",
      "is_task_result",
      "size",
      "price_to",
      "photos/upload",
      "Content-Length",
      "user_id",
      "from_date",
      "Content-Type",
      "photos",
      "rating",
      "false",
      "/",
      "to_date",
      "company_id",
      "photos/process",
      "metadata",
      "task_id",
      "location",
      "id",
      "offset",
      "/localhost"
    ],
    "description": "Данный микросервис предназначен для хранения и обработки фотографий с использованием SeaweedFS в качестве S3-совместимого хранилища.",
    "port": "8081",
    "documentation": [
      "# Микросервис для хранения и обработки фотографий\n\nДанный микросервис предназначен для хранения и обработки фотографий с использованием SeaweedFS в качестве S3-совместимого хранилища.\n\n## Особенности\n\n- Загрузка фотографий и автоматическое создание нескольких размеров (thumbnail, medium, large)\n- Получение фотографий разных размеров по ID\n- Обработка изображений: изменение размера, обрезка\n- Хранение метаданных фотографий\n- Фильтрация фотографий по пользователю, компании, задаче, и т.д.\n- Докеризация всех компонентов для простоты запуска и развертывания\n\n## Требования\n\n- Docker и Docker Compose\n- 1 ГБ свободной оперативной памяти (минимум)\n- 2 ГБ свободного дискового пространства (минимум)\n\n## Быстрый старт\n\n### Запуск сервиса\n\n```bash\n# Клонировать репозиторий\ngit clone <repository-url>\ncd ServiceApi\n\n# Запустить все сервисы в фоновом режиме\nmake up\n\n# Или вручную через docker-compose\ndocker-compose up -d\n```\n\nПосле запуска сервис будет доступен по адресу: http://localhost:8081\n\n### Проверка статуса\n\n```bash\n# Проверить статус всех контейнеров\nmake ps\n\n# Просмотр логов\nmake logs\n```\n\n### Остановка сервиса\n\n```bash\n# Остановить все контейнеры\nmake down\n\n# Удалить все данные и контейнеры\nmake clean\n```\n\n## Структура проекта в Docker\n\n- **photoservice**: Основной микросервис для обработки и хранения фотографий\n- **seaweedfs-master**: Мастер-сервер SeaweedFS, управляет распределением и хранением данных\n- **seaweedfs-volume**: Volume-сервер SeaweedFS, хранит физические данные (фотографии)\n- **seaweedfs-filer**: Filer-сервер SeaweedFS, предоставляет файловый интерфейс и метаданные\n\n## API\n\n### Загрузка фотографии\n```\nPOST /photos/upload\nContent-Type: multipart/form-data\n\nПараметры:\n- file: Файл изображения\n- user_id: ID пользователя (обязательно)\n- company_id: ID компании (опционально)\n- task_id: ID задачи (опционально)\n- is_task_result: Является ли результатом задачи (true/false)\n```\n\n### Получение фотографии\n```\nGET /photos/{id}?size=[original|thumbnail|medium|large]\n\nПараметры:\n- size: Размер изображения (по умолчанию: original)\n- metadata: Если true, возвращает только метаданные без самого изображения\n```\n\n### Список фотографий\n```\nGET /photos?user_id={user_id}&company_id={company_id}&task_id={task_id}&is_task_result={true|false}&from_date={date}&to_date={date}&limit={limit}&offset={offset}\n\nВсе параметры опциональны и используются для фильтрации.\n```\n\n### Обработка фотографии\n```\nPOST /photos/process?id={photo_id}\nContent-Type: application/json\n\nПример тела запроса:\n{\n  \"resize\": true,\n  \"width\": 800,\n  \"height\": 600,\n  \"quality\": 85,\n  \"crop\": false\n}\n```\n\n## Переменные окружения\n\nФотосервис использует следующие переменные окружения:\n\n- `EXTERNAL_HOST`: Внешний хост для доступа к API (по умолчанию: localhost)\n- `PUBLIC_VOLUME_URL`: Публичный URL для доступа к volume server (по умолчанию: http://{EXTERNAL_HOST}:8080)\n\n## Управление через Makefile\n\nВ проекте есть Makefile со следующими командами:\n\n- `make up`: Запуск всех сервисов\n- `make down`: Остановка всех сервисов\n- `make clean`: Удаление всех контейнеров и данных\n- `make logs`: Просмотр логов всех сервисов\n- `make logs-photo`: Просмотр логов только фотосервиса\n- `make logs-seaweed`: Просмотр логов только SeaweedFS\n- `make ps`: Проверка статуса контейнеров\n- `make restart-photo`: Перезапуск фотосервиса\n- `make rebuild`: Полное пересоздание и запуск системы\n- `make disk-usage`: Проверка использования дискового пространства "
    ]
  },
  {
    "name": "Region",
    "path": "/workspace/user_input_files/production-main/Region",
    "technology": "unknown",
    "endpoints": [],
    "description": "",
    "port": "unknown",
    "documentation": []
  },
  {
    "name": "TG_BOT_for_workers",
    "path": "/workspace/user_input_files/production-main/TG_BOT_for_workers",
    "technology": "unknown",
    "endpoints": [],
    "description": "",
    "port": "unknown",
    "documentation": []
  }
]