#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Backend
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ API
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8080"
TEST_EMAIL_CLIENT = "test_client@example.com"
TEST_EMAIL_COMPANY = "test_company@example.com"
TEST_PASSWORD = "testpassword123"

class APITester:
    def __init__(self, base_url):
        self.base_url = base_url
        self.client_token = None
        self.company_token = None
        self.test_results = []

    def log_test(self, test_name, success, details=""):
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")

    def test_public_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            response = requests.get(f"{self.base_url}/cards")
            self.log_test("GET /cards", response.status_code == 200, f"Status: {response.status_code}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            response = requests.get(f"{self.base_url}/orders")
            self.log_test("GET /orders", response.status_code == 200, f"Status: {response.status_code}")
            
        except Exception as e:
            self.log_test("Public endpoints", False, f"Error: {str(e)}")

    def test_registration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client_data = {
            "full_name": "Test Client",
            "email": TEST_EMAIL_CLIENT,
            "password_hash": TEST_PASSWORD,
            "phone": "+79991234567"
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/register/client", json=client_data)
            if response.status_code == 200:
                data = response.json()
                self.client_token = data.get("response_user", {}).get("token")
                self.log_test("Client registration", True, f"Token received: {bool(self.client_token)}")
            else:
                self.log_test("Client registration", False, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Client registration", False, f"Error: {str(e)}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
        company_data = {
            "company_name": "Test Company",
            "full_name": "Test Company Owner",
            "position_agent": "CEO",
            "id_company": "123456789",
            "email": TEST_EMAIL_COMPANY,
            "password_hash": TEST_PASSWORD,
            "phone": "+79991234568",
            "address": "Test Address",
            "type_service": "IT Services"
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/register/company", json=company_data)
            if response.status_code == 200:
                data = response.json()
                self.company_token = data.get("response_user", {}).get("token")
                self.log_test("Company registration", True, f"Token received: {bool(self.company_token)}")
            else:
                self.log_test("Company registration", False, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Company registration", False, f"Error: {str(e)}")

    def test_login(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...")
        
        login_data = {
            "general_login": {
                "general_login_attributes": {
                    "email": TEST_EMAIL_CLIENT,
                    "password": TEST_PASSWORD
                }
            }
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/login", json=login_data)
            if response.status_code == 200:
                data = response.json()
                token = data.get("response_user", {}).get("token")
                if token:
                    self.client_token = token
                self.log_test("Client login", True, f"Token updated: {bool(token)}")
            else:
                self.log_test("Client login", False, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Client login", False, f"Error: {str(e)}")

    def test_account_access(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É...")
        
        if not self.client_token:
            self.log_test("Account access", False, "No client token available")
            return
            
        account_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            }
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/", json=account_data)
            self.log_test("Client account access", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Client account access", False, f"Error: {str(e)}")

    def test_balance_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º"""
        print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º...")
        
        if not self.client_token:
            self.log_test("Balance operations", False, "No client token available")
            return
            
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        balance_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            }
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/balance/", json=balance_data)
            self.log_test("Get balance", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Get balance", False, f"Error: {str(e)}")
            
        # –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        topup_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            },
            "amount": 1000.0
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/balance/topup", json=topup_data)
            self.log_test("Balance topup", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Balance topup", False, f"Error: {str(e)}")

    def test_notifications(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        if not self.client_token:
            self.log_test("Notifications", False, "No client token available")
            return
            
        notifications_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            },
            "limit": 10,
            "offset": 0
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/notification/list", json=notifications_data)
            self.log_test("Get notifications", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Get notifications", False, f"Error: {str(e)}")
            
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        unread_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            }
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/notification/unread-count", json=unread_data)
            self.log_test("Get unread count", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Get unread count", False, f"Error: {str(e)}")

    def test_profile_update(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        print("\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")
        
        if not self.client_token:
            self.log_test("Profile update", False, "No client token available")
            return
            
        profile_data = {
            "user": {
                "login": {
                    "token": self.client_token
                }
            },
            "profile": {
                "full_name": "Updated Test Client",
                "phone": "+79991234999"
            }
        }
        
        try:
            response = requests.post(f"{self.base_url}/v1/account/profile/update", json=profile_data)
            self.log_test("Profile update", response.status_code == 200, f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Profile update", False, f"Error: {str(e)}")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...")
        print(f"Base URL: {self.base_url}")
        
        self.test_public_endpoints()
        self.test_registration()
        self.test_login()
        self.test_account_access()
        self.test_balance_operations()
        self.test_notifications()
        self.test_profile_update()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests} ‚úÖ")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} ‚ùå")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  - {result['test']}: {result['details']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Backend API Tester")
    print("==================")
    
    tester = APITester(BASE_URL)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/cards", timeout=5)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (Status: {response.status_code})")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        return
    
    tester.run_all_tests()

if __name__ == "__main__":
    main()
