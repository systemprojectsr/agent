from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler,
    PicklePersistence,
)
import sqlite3
import logging
import os
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('data'):
    os.makedirs('data')

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
SUPPORT_USER_ID = 525174974  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='data/bot.log'  # –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É data
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REG_NAME, REG_AGE, REG_CITY, REG_EXP, REG_INCOME, REG_PHOTO = range(6)
VIEW_CURRENT_ORDERS, VIEW_COMPLETED_ORDERS, ORDER_DETAILS, PHOTO_REPORT = range(6, 10)
SUPPORT_STATE = 10  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('data/bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        age INTEGER,
        city TEXT,
        experience TEXT,
        desired_income INTEGER,
        photo_id TEXT
    )
''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É orders, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        creation_date TEXT,
        creation_time TEXT,
        completion_date TEXT,
        completion_time TEXT,
        payment INTEGER,
        address TEXT,
        description TEXT,
        status TEXT,
        photo_report TEXT,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
''')

conn.commit()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì± –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã")],
        [KeyboardButton("/start")]
    ],
    resize_keyboard=True,
    is_persistent=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–∫–∞–∑–æ–≤
orders_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    is_persistent=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
def get_order_selection_keyboard(orders, is_completed=False):
    keyboard = []
    logger.info(f"Creating keyboard for orders: {orders}")
    for order in orders:
        order_id = order[0]
        status = 'completed' if is_completed else 'active'
        callback_data = f"select_order_{order_id}_{status}"
        logger.info(f"Adding button with callback_data: {callback_data}")
        keyboard.append([InlineKeyboardButton(
            f"–ó–∞–∫–∞–∑ #{order_id}",
            callback_data=callback_data
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")])
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
order_details_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç", callback_data="add_photo_report")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞
complete_order_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="complete_order")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")]
])

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGES = [
    "–û—Ç–ª–∏—á–Ω–æ!",
    "–ü—Ä–∏–Ω—è–ª!",
    "–ü—Ä–∏–Ω—è–ª! ",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."
]
def get_friendly_response():
    return WELCOME_MESSAGES.pop(0) if WELCOME_MESSAGES else "–ü—Ä–∏–Ω—è—Ç–æ! ‚úÖ"

def insert_test_orders():
    # Test data for orders
    test_orders = [
        # Current orders
        {
            'creation_date': '2024-03-20',
            'creation_time': '10:00:00',
            'payment': 5000,
            'address': '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ 1',
            'status': 'active'
        },
        {
            'creation_date': '2024-03-21',
            'creation_time': '14:30:00',
            'payment': 7500,
            'address': '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 5',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ 2',
            'status': 'active'
        },
        # Completed orders
        {
            'creation_date': '2024-03-15',
            'creation_time': '09:00:00',
            'completion_date': '2024-03-16',
            'completion_time': '17:00:00',
            'payment': 3000,
            'address': '—É–ª. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è, –¥. 3',
            'description': '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ 1',
            'status': 'completed',
            'photo_report': 'test_photo_1'
        },
        {
            'creation_date': '2024-03-18',
            'creation_time': '11:00:00',
            'completion_date': '2024-03-19',
            'completion_time': '15:30:00',
            'payment': 4500,
            'address': '—É–ª. –ì–æ—Ç–æ–≤–∞—è, –¥. 7',
            'description': '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ 2',
            'status': 'completed',
            'photo_report': 'test_photo_2'
        }
    ]

    # Insert test orders
    for order in test_orders:
        if order['status'] == 'active':
            cursor.execute('''
                INSERT INTO orders (creation_date, creation_time, payment, 
                                  address, description, status)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                order['creation_date'],
                order['creation_time'],
                order['payment'],
                order['address'],
                order['description'],
                order['status']
            ))
        else:  # completed orders
            cursor.execute('''
                INSERT INTO orders (creation_date, creation_time, completion_date,
                                  completion_time, payment, address, description, status, photo_report)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                order['creation_date'],
                order['creation_time'],
                order['completion_date'],
                order['completion_time'],
                order['payment'],
                order['address'],
                order['description'],
                order['status'],
                order['photo_report']
            ))
    
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    insert_test_orders()
    
    await update.message.reply_text(
        "üëã –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return REG_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞–ª–æ"
async def restart_registration(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return REG_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def register_name(update: Update, context: CallbackContext) -> int:
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text(f"{get_friendly_response()} –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return REG_AGE

async def register_age(update: Update, context: CallbackContext) -> int:
    if not update.message.text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ üßÆ")
        return REG_AGE
    context.user_data['age'] = int(update.message.text)
    await update.message.reply_text(f"{get_friendly_response()} –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? üåÜ")
    return REG_CITY

async def register_city(update: Update, context: CallbackContext) -> int:
    context.user_data['city'] = update.message.text
    await update.message.reply_text(f"{get_friendly_response()} –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã üìù")
    return REG_EXP

async def register_exp(update: Update, context: CallbackContext) -> int:
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("üíº –ö–∞–∫–æ–π –¥–æ—Ö–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
    return REG_INCOME

async def register_income(update: Update, context: CallbackContext) -> int:
    if not update.message.text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ üßÆ")
        return REG_INCOME
    context.user_data['desired_income'] = int(update.message.text)
    await update.message.reply_text(f"{get_friendly_response()} üì∏ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
    return REG_PHOTO

async def register_photo(update: Update, context: CallbackContext) -> int:
    photo = update.message.photo[-1]
    context.user_data['photo_id'] = photo.file_id

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user_exists = cursor.fetchone()

    if user_exists:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            UPDATE users
            SET full_name = ?, age = ?, city = ?, experience = ?, desired_income = ?, photo_id = ?
            WHERE user_id = ?
        ''', (
            context.user_data['full_name'],
            context.user_data['age'],
            context.user_data['city'],
            context.user_data['experience'],
            context.user_data['desired_income'],
            context.user_data['photo_id'],
            user_id
        ))
    else:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            INSERT INTO users (user_id, full_name, age, city, experience, desired_income, photo_id)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            context.user_data['full_name'],
            context.user_data['age'],
            context.user_data['city'],
            context.user_data['experience'],
            context.user_data['desired_income'],
            context.user_data['photo_id']
        ))

    conn.commit()

    await update.message.reply_text(
        "üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!" if user_exists else "üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ üòî",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    response = ""

    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑":
        return await complete_order(update, context)

    elif text == "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
            reply_markup=order_details_keyboard
        )
        return ORDER_DETAILS

    elif text == "üì± –ü—Ä–æ—Ñ–∏–ª—å":
        user_id = update.effective_user.id
        cursor.execute('SELECT full_name, age, city, experience, photo_id, desired_income FROM users WHERE user_id = ?', (user_id,))
        user_data = cursor.fetchone()

        if user_data:
            response = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üè∑ –ò–º—è: {user_data[0]}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[1]}\n"
                f"üèô –ì–æ—Ä–æ–¥: {user_data[2]}\n"
                f"üíº –û–ø—ã—Ç: {user_data[3]}\n"
                f"üíµ –ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {user_data[5]}—Ä"
            )
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=user_data[4],
                caption=response,
                reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return ConversationHandler.END

    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=orders_keyboard
        )
        return VIEW_CURRENT_ORDERS

    elif text == "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã":
        await view_current_orders(update, context)
        return VIEW_CURRENT_ORDERS

    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
        await view_completed_orders(update, context)
        return VIEW_COMPLETED_ORDERS

    elif text == "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=orders_keyboard
        )
        return VIEW_CURRENT_ORDERS

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        return await start_support_chat(update, context)

    elif text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã":
        await update.message.reply_text(
            "üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0 ‚ÇΩ\n"
            "üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
            "‚Ä¢ –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π",
            reply_markup=main_keyboard
        )

    else:
        await update.message.reply_text(
            "ü§ñ –Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

async def view_current_orders(update: Update, context: CallbackContext) -> int:
    logger.info("Fetching current orders")
    cursor.execute('''
        SELECT order_id, creation_date, creation_time, payment, address, description 
        FROM orders 
        WHERE status = 'active'
        ORDER BY order_id
    ''')
    orders = cursor.fetchall()
    logger.info(f"Found orders: {orders}")
    
    if orders:
        response = "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            response += f"–ó–∞–∫–∞–∑ #{order[0]}\n"
        
        keyboard = get_order_selection_keyboard(orders, is_completed=False)
        logger.info(f"Created keyboard: {keyboard.to_dict()}")
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                response,
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                response,
                reply_markup=keyboard
            )
    else:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ]])
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=keyboard
            )
    return VIEW_CURRENT_ORDERS

async def view_completed_orders(update: Update, context: CallbackContext) -> int:
    cursor.execute('''
        SELECT order_id, creation_date, creation_time, completion_date, completion_time, 
               payment, address, description 
        FROM orders 
        WHERE status = 'completed'
        ORDER BY completion_date DESC, completion_time DESC
    ''')
    orders = cursor.fetchall()
    
    if orders:
        response = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            response += f"–ó–∞–∫–∞–∑ #{order[0]}\n"
        
        keyboard = get_order_selection_keyboard(orders, is_completed=True)
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                response,
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                response,
                reply_markup=keyboard
            )
    else:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ]])
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=keyboard
            )
    return VIEW_COMPLETED_ORDERS

async def handle_order_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Received callback query: {query.data}")
    
    if query.data == "back_to_orders":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="view_current_orders")],
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="view_completed_orders")]
        ])
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=keyboard
        )
        return VIEW_CURRENT_ORDERS
    
    if query.data == "view_current_orders":
        return await view_current_orders(update, context)
    
    if query.data == "view_completed_orders":
        return await view_completed_orders(update, context)
    
    if query.data == "add_photo_report":
        if 'selected_order' not in context.user_data:
            await query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=get_order_selection_keyboard([], False)
            )
            return VIEW_CURRENT_ORDERS
        
        await query.message.edit_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
        )
        return ORDER_DETAILS
    
    if query.data == "complete_order":
        if 'selected_order' not in context.user_data:
            await query.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=get_order_selection_keyboard([], False)
            )
            return VIEW_CURRENT_ORDERS
        
        return await complete_order(update, context)
    
    if query.data.startswith("select_order_"):
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "select_order_"
            data = query.data[13:]  # –¥–ª–∏–Ω–∞ "select_order_" = 13
            parts = data.split("_")
            logger.info(f"Split callback data: {parts}")
            
            if len(parts) != 2:
                raise ValueError(f"Invalid callback data format: {query.data}")
                
            order_id = int(parts[0])
            status = parts[1]
            
            logger.info(f"Processing order: id={order_id}, status={status}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_order'] = order_id
            
            if status == 'active':
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                cursor.execute('''
                    SELECT order_id, creation_date, creation_time, payment, address, description, photo_report 
                    FROM orders 
                    WHERE order_id = ? AND status = 'active'
                ''', (order_id,))
                order = cursor.fetchone()
                
                logger.info(f"Fetched active order: {order}")
                
                if order:
                    response = f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order[0]}:\n\n"
                    response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[1]}\n"
                    response += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order[2]}\n"
                    response += f"–û–ø–ª–∞—Ç–∞: {order[3]}—Ä\n"
                    response += f"–ê–¥—Ä–µ—Å: {order[4]}\n"
                    response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order[5]}\n\n"
                    
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç", callback_data="add_photo_report")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")]
                    ])
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if order[6]:  # photo_report
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=order[6],
                            caption="üì∏ –¢–µ–∫—É—â–∏–π —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç:"
                        )
                    
                    await query.message.edit_text(
                        response,
                        reply_markup=keyboard
                    )
                    return ORDER_DETAILS
                else:
                    logger.warning(f"Active order not found: id={order_id}")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
                cursor.execute('''
                    SELECT order_id, creation_date, creation_time, completion_date, completion_time, 
                           payment, address, description, photo_report 
                    FROM orders 
                    WHERE order_id = ? AND status = 'completed'
                ''', (order_id,))
                order = cursor.fetchone()
                
                logger.info(f"Fetched completed order: {order}")
                
                if order:
                    response = f"‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order[0]}:\n\n"
                    response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[1]}\n"
                    response += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order[2]}\n"
                    response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order[3]}\n"
                    response += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order[4]}\n"
                    response += f"–û–ø–ª–∞—Ç–∞: {order[5]}—Ä\n"
                    response += f"–ê–¥—Ä–µ—Å: {order[6]}\n"
                    response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order[7]}\n"
                    
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
                    ]])
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if order[8]:  # photo_report
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=order[8],
                            caption="üì∏ –§–æ—Ç–æ–æ—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑—É:"
                        )
                    
                    await query.message.edit_text(
                        response,
                        reply_markup=keyboard
                    )
                else:
                    logger.warning(f"Completed order not found: id={order_id}")
                return VIEW_COMPLETED_ORDERS
        except Exception as e:
            logger.error(f"Error in handle_order_selection: {str(e)}", exc_info=True)
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            await query.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=keyboard
            )
            return VIEW_CURRENT_ORDERS

async def handle_photo_report(update: Update, context: CallbackContext) -> int:
    logger.info("Handling photo report")
    
    if 'selected_order' not in context.user_data:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ]])
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=keyboard
        )
        return VIEW_CURRENT_ORDERS
    
    photo = update.message.photo[-1]
    order_id = context.user_data['selected_order']
    logger.info(f"Processing photo report for order {order_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        cursor.execute('''
            SELECT status FROM orders 
            WHERE order_id = ? AND status = 'active'
        ''', (order_id,))
        order = cursor.fetchone()
        
        if not order:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.",
                reply_markup=keyboard
            )
            return VIEW_CURRENT_ORDERS
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            UPDATE orders 
            SET photo_report = ?
            WHERE order_id = ? AND status = 'active'
        ''', (photo.file_id, order_id))
        conn.commit()
        logger.info(f"Photo report saved to database for order {order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cursor.execute('''
            SELECT order_id, creation_date, creation_time, payment, address, description 
            FROM orders 
            WHERE order_id = ? AND status = 'active'
        ''', (order_id,))
        order = cursor.fetchone()
        
        if order:
            response = f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order[0]}:\n\n"
            response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[1]}\n"
            response += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order[2]}\n"
            response += f"–û–ø–ª–∞—Ç–∞: {order[3]}—Ä\n"
            response += f"–ê–¥—Ä–µ—Å: {order[4]}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order[5]}\n\n"
            response += "üì∏ –§–æ—Ç–æ–æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo.file_id,
                caption="üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç:"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="complete_order")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")]
            ])
            
            await update.message.reply_text(
                response,
                reply_markup=keyboard
            )
            logger.info("Photo report processed successfully")
            return ORDER_DETAILS
        else:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            await update.message.reply_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=keyboard
            )
            return VIEW_CURRENT_ORDERS
            
    except Exception as e:
        logger.error(f"Error in handle_photo_report: {str(e)}", exc_info=True)
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ]])
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return VIEW_CURRENT_ORDERS

async def complete_order(update: Update, context: CallbackContext) -> int:
    try:
        if not context.user_data.get('selected_order'):
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                    reply_markup=keyboard
                )
            return VIEW_CURRENT_ORDERS

        order_id = context.user_data['selected_order']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞
        cursor.execute('''
            SELECT photo_report FROM orders 
            WHERE order_id = ? AND status = 'active'
        ''', (order_id,))
        order = cursor.fetchone()
        
        if not order or not order[0]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç.",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç.",
                    reply_markup=keyboard
                )
            return VIEW_CURRENT_ORDERS

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ completed
        cursor.execute('''
            UPDATE orders 
            SET status = 'completed', 
                completion_date = date('now'), 
                completion_time = time('now')
            WHERE order_id = ? AND status = 'active'
        ''', (order_id,))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute('''
            SELECT order_id, creation_date, creation_time, completion_date, completion_time,
                   payment, address, description 
            FROM orders 
            WHERE order_id = ? AND status = 'completed'
        ''', (order_id,))
        completed_order = cursor.fetchone()
        
        if completed_order:
            response = "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            response += f"–ó–∞–∫–∞–∑ #{completed_order[0]}\n"
            response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {completed_order[1]}\n"
            response += f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {completed_order[2]}\n"
            response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completed_order[3]}\n"
            response += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completed_order[4]}\n"
            response += f"–û–ø–ª–∞—Ç–∞: {completed_order[5]}—Ä\n"
            response += f"–ê–¥—Ä–µ—Å: {completed_order[6]}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {completed_order[7]}\n"
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
            ]])
            
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    response,
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    response,
                    reply_markup=keyboard
                )
            
            # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('selected_order', None)
            return VIEW_COMPLETED_ORDERS
            
    except Exception as e:
        logger.error(f"Error in complete_order: {str(e)}")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ]])
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=keyboard
            )
        return VIEW_CURRENT_ORDERS

async def start_support_chat(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    await update.message.reply_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    return SUPPORT_STATE

async def handle_support_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if not SUPPORT_USER_ID:
        logger.error("SUPPORT_USER_ID is not set")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    user = update.effective_user
    message = update.message.text
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_message = (
        f"‚ùóÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        f"–û—Ç: {user.first_name} ({user.id})\n"
        f"–í—Ä–µ–º—è: {current_time}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
    )
    
    try:
        logger.info(f"Attempting to send support message to user {SUPPORT_USER_ID}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await context.bot.send_message(
            chat_id=SUPPORT_USER_ID,
            text=support_message
        )
        logger.info("Support message sent successfully")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
            reply_markup=main_keyboard
        )
    except Exception as e:
        logger.error(f"Error sending support message: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
    
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    # Insert test orders only if the table is empty
    cursor.execute('SELECT COUNT(*) FROM orders')
    if cursor.fetchone()[0] == 0:
        insert_test_orders()
    
    # –°–æ–∑–¥–∞–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    persistence = PicklePersistence(filepath="data/bot_data.pickle")
    
    application = ApplicationBuilder().token("8032150632:AAHJu69ztedvhOucbazOyd2Qhp7hVPtAaxY").persistence(persistence).build()

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REG_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_age)],
            REG_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_city)],
            REG_EXP: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_exp)],
            REG_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_income)],
            REG_PHOTO: [MessageHandler(filters.PHOTO, register_photo)],
            VIEW_CURRENT_ORDERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                MessageHandler(filters.PHOTO, handle_photo_report)
            ],
            VIEW_COMPLETED_ORDERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
            ORDER_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                MessageHandler(filters.PHOTO, handle_photo_report)
            ],
            PHOTO_REPORT: [
                MessageHandler(filters.PHOTO, handle_photo_report),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
            SUPPORT_STATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message),
                CommandHandler('cancel', cancel)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="main_conversation",
        persistent=True
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    callback_handler = CallbackQueryHandler(handle_order_selection)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(conv_handler)
    application.add_handler(callback_handler)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    application.post_init = lambda app: app.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])

if __name__ == '__main__':
    main()