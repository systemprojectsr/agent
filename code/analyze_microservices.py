#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
"""

import os
import json
import re
from pathlib import Path

def analyze_microservice_api(service_path, service_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API"""
    
    api_info = {
        "name": service_name,
        "path": str(service_path),
        "technology": "unknown",
        "endpoints": [],
        "description": "",
        "port": "unknown",
        "documentation": []
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø–æ —Ñ–∞–π–ª–∞–º
    if (service_path / "go.mod").exists():
        api_info["technology"] = "Go"
    elif (service_path / "app.py").exists() or (service_path / "main.py").exists():
        api_info["technology"] = "Python"
    elif (service_path / "package.json").exists():
        api_info["technology"] = "Node.js"
    
    # –ß–∏—Ç–∞–µ–º README –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    readme_files = ["README.md", "READMe.md", "readme.md"]
    for readme_file in readme_files:
        readme_path = service_path / readme_file
        if readme_path.exists():
            try:
                with open(readme_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    api_info["documentation"].append(content)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
                    lines = content.split('\n')[:10]
                    for line in lines:
                        if line.strip() and not line.startswith('#') and not line.startswith('##'):
                            api_info["description"] = line.strip()
                            break
                    
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö
                    port_matches = re.findall(r':(\d{4,5})', content)
                    if port_matches:
                        api_info["port"] = port_matches[0]
                    
                    # –ò—â–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API
                    endpoint_patterns = [
                        r'`([A-Z]+)\s+([^`]+)`',  # `GET /api/endpoint`
                        r'/([a-zA-Z_/\-]+)',      # /endpoint
                        r'v\d+/([a-zA-Z_/\-]+)',  # v1/endpoint
                    ]
                    
                    for pattern in endpoint_patterns:
                        matches = re.findall(pattern, content)
                        for match in matches:
                            if isinstance(match, tuple):
                                if len(match) == 2:  # Method and path
                                    api_info["endpoints"].append(f"{match[0]} {match[1]}")
                                else:
                                    api_info["endpoints"].append(match[0])
                            else:
                                if not match.endswith('.md') and not match.endswith('.html'):
                                    api_info["endpoints"].append(match)
                    
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {readme_path}: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    if api_info["technology"] == "Go":
        # –ò—â–µ–º .go —Ñ–∞–π–ª—ã
        for go_file in service_path.rglob("*.go"):
            try:
                with open(go_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ò—â–µ–º —Ä–æ—É—Ç—ã –≤ Go –∫–æ–¥–µ
                    route_patterns = [
                        r'\.Handle\(["\']([^"\']+)["\']',
                        r'\.Get\(["\']([^"\']+)["\']',
                        r'\.Post\(["\']([^"\']+)["\']',
                        r'\.Put\(["\']([^"\']+)["\']',
                        r'\.Delete\(["\']([^"\']+)["\']',
                    ]
                    for pattern in route_patterns:
                        matches = re.findall(pattern, content)
                        api_info["endpoints"].extend(matches)
            except:
                continue
                
    elif api_info["technology"] == "Python":
        # –ò—â–µ–º .py —Ñ–∞–π–ª—ã
        for py_file in service_path.rglob("*.py"):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # –ò—â–µ–º —Ä–æ—É—Ç—ã –≤ Flask/FastAPI –∫–æ–¥–µ
                    route_patterns = [
                        r'@app\.route\(["\']([^"\']+)["\']',
                        r'@router\.get\(["\']([^"\']+)["\']',
                        r'@router\.post\(["\']([^"\']+)["\']',
                    ]
                    for pattern in route_patterns:
                        matches = re.findall(pattern, content)
                        api_info["endpoints"].extend(matches)
            except:
                continue
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    api_info["endpoints"] = list(set(api_info["endpoints"]))
    
    return api_info

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    project_path = Path("/workspace/user_input_files/production-main")
    
    # –°–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    microservices = [
        "outsourcing-auth",
        "Search+Parameters", 
        "BD Client-Company",
        "DS-AM",
        "Region",
        "TG_BOT_for_workers"
    ]
    
    analysis_results = []
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
    print("=" * 50)
    
    for service_name in microservices:
        service_path = project_path / service_name
        
        if service_path.exists():
            print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ {service_name}...")
            api_info = analyze_microservice_api(service_path, service_name)
            analysis_results.append(api_info)
            
            print(f"   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {api_info['technology']}")
            print(f"   –ü–æ—Ä—Ç: {api_info['port']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {api_info['description'][:100]}...")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(api_info['endpoints'])}")
            
            if api_info['endpoints']:
                print("   –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
                for endpoint in api_info['endpoints'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"     - {endpoint}")
                if len(api_info['endpoints']) > 5:
                    print(f"     ... –∏ –µ—â–µ {len(api_info['endpoints']) - 5}")
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    output_file = "/workspace/data/microservices_analysis.json"
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(analysis_results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    create_architecture_summary(analysis_results)

def create_architecture_summary(analysis_results):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    summary = []
    summary.append("# üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–í\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
    tech_groups = {}
    for service in analysis_results:
        tech = service['technology']
        if tech not in tech_groups:
            tech_groups[tech] = []
        tech_groups[tech].append(service)
    
    summary.append("## üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º:\n")
    for tech, services in tech_groups.items():
        summary.append(f"**{tech}**: {len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
        for service in services:
            summary.append(f"  - {service['name']} (–ø–æ—Ä—Ç: {service['port']})")
        summary.append("")
    
    summary.append("## üîó –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:\n")
    
    for service in analysis_results:
        summary.append(f"### {service['name']}")
        summary.append(f"- **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è**: {service['technology']}")
        summary.append(f"- **–ü–æ—Ä—Ç**: {service['port']}")
        summary.append(f"- **–û–ø–∏—Å–∞–Ω–∏–µ**: {service['description']}")
        
        if service['endpoints']:
            summary.append("- **API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã**:")
            for endpoint in service['endpoints']:
                summary.append(f"  - `{endpoint}`")
        
        summary.append("")
    
    summary.append("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n")
    summary.append("1. **API Gateway**: –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤")
    summary.append("2. **CORS**: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    summary.append("3. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–∑ outsourcing-auth –≤–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã")
    summary.append("4. **Error Handling**: –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    summary.append("5. **Caching**: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
    summary_file = "/workspace/docs/architecture_summary.md"
    os.makedirs(os.path.dirname(summary_file), exist_ok=True)
    
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(summary))
    
    print(f"üìã –°–≤–æ–¥–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {summary_file}")

if __name__ == "__main__":
    main()
